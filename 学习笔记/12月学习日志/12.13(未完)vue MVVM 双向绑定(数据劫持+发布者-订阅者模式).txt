vue2中采用Object.defineProperty()的形式进行数据劫持，这种方式经常导致数组无法更新值的问题；

vue3中采用proxy的形式进行数据劫持，这种数据劫持方式可以劫持所有数据的变化，保证了数据正确更改渲染到页面，但proxy采用ES6语法结构，具有兼容性问题。

概念：发布-订阅又称为观察者模式，它定义的是一种一对多的依赖关系，当一个状态发生改变的时候，所有这个状态的对象都会得到通知

##### 生活中的发布-订阅模式

上面是发布-订阅的一个比较正式的解释，可能这个解释不大好解释，所以通过以下例子来理解：

比如看中了一套房子，等到去了售楼处以后才被告知房子已经售完了。但是售楼小姐告知，将来会有尾盘推出。具体什么时候推出，目前没人知道。

但是买家又不想频繁的跑，于是就把自己的电话号码登记在售楼处，在登机的花名册上有很多类似的买家。售楼小姐答应买家，新的房源一出来就一一通知买家。

适用性：

·发布订阅模式可以广泛的应用于异步编程中；

·发布订阅模式可以取代对象之间的硬编程通知机制；

一步步实现发布订阅模式：

·首先指定好谁充当发布者（售楼处）

·然后给发布者添加一个缓存列表，用于存放回调函数，以便通知订阅者（售楼处花名册）。

·最后发布消息的时候，发布者会遍历这个缓存列表，依次触发里面存放的订阅者的回调函数；

![image-20211213143532735](C:\Users\www\AppData\Roaming\Typora\typora-user-images\image-20211213143532735.png)

##### 

##### Vue 是如何实现数据双向绑定的？

Vue 双向数据绑定是通过 `数据劫持` 结合 `发布订阅模式` 的方式来实现的，

通过Object.defineProperty()来劫持各个属性的setter，getter，在数据变动时发布消息给订阅者，触发相应的监听回调。

 核心：`Vue 2.x`是`Object.defineProperty()` 方法。`vue3.x`是Proxy

1. 实现一个监听器 (observer)：对数据对象进行遍历，包括子属性对象的属性，利用 `Object.defineProperty()` 对属性都加上 setter 和 getter。这样的话，给这个对象的某个值赋值，就会触发 setter，那么就能监听到了数据变化。
2. 实现一个解析器(compile) ：解析 Vue 模板指令，将模板中的变量都替换成数据，然后初始化渲染页面视图，并将每个指令对应的节点绑定更新函数，添加监听数据的订阅者，一旦数据有变动，收到通知，调用更新函数进行数据更新。
3. 实现一个订阅者(watcher)：订阅者是 监听器  和 解析器  之间通信的桥梁 ，主要的任务是订阅 监听器 中的属性值变化的消息，当收到属性值变化的消息时，触发 解析器  中对应的更新函数。
4. 实现一个订阅器(Dep) ：订阅器采用 发布-订阅 设计模式，用来收集订阅者 ，对 监听器 和 订阅者  进行统一管理。

![img](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a286bdc076ae425fb9591bb8c4153240~tplv-k3u1fbpfcp-watermark.awebp)
