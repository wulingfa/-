##### 1.vue3.0 和 vue2.0区别

##### 1.OptionsAPI更换成CompositionAPI

- OptionsAPI当组件代码很多时，如果增加需求，要在 data、methods、computed 以及 mounted 中反复的跳转

- CompositionAPI将零散分布的逻辑组合在一起来维护，并且还可以将单独的功能逻辑拆分成单独的文件

  

##### 1.1.setup函数

- setup 是 Vue3.x 新增的一个选项， 他是组件内使用 `Composition API`的入口
- **setup中不能访问this**，可以使用getCurrentInstance来获取当前组件的实例
- setup函数接收两个参数
  - props：响应式的
  - context：this中最常用的三个属性值，可解构成{attrs, slot, emit}

##### 1.2.响应式APIreactive、ref 与 toRefs

- 这些方法都需要从vue中导入
- 在 **vue2.x** 中， 定义数据都是在`data`中， 但是 **Vue3.x** 可以使用`reactive`和`ref`来进行数据定义
- reactive：只能处理复杂对象类型的双向绑定
- ref：既能处理对象类型的双向绑定，也能处理基本类型的双向绑定，进行操作时需要` .value`才可以
  - ref返回的响应式对象是只包含一个名为value参数的RefImpl对象，在js中获取和修改都是通过它的value属性；
  - 但是在模板中被渲染时，自动展开内部的值，因此不需要在模板中追加`.value`
- toRefs ：将一个 reactive 对象转化为属性全部为 ref 对象的普通对象

##### 1.3.响应式侦听watch 与 watchEffect 的用法

```
watch(source, callback, [options])
```

- source: 可以支持 string,Object,Function,Array; 用于指定要侦听的响应式变量
- callback: 执行的回调函数
- options：支持 deep、immediate 和 flush 选项。
- 对比`WatchEffect` ，`Watch`允许我们

  - 懒执行函数
  - 更明确哪些状态改变触发监听器
  - 可以监听获取到变化前后的值

```js
watchEffect(() => {})
```

- watchEffect不需要手动传入依赖
- 每次初始化时watchEffect都会执行一次回调函数来自动获取依赖
- watchEffect无法获取到原值，只能得到变化后的值

```js
import { defineComponent, ref, reactive, toRefs, watch } from "vue";
export default defineComponent({
  setup() {
    //侦听 reactive 定义的数据
    const state = reactive({ nickname: "Kylin", age: 20 });
		let year = ref(0)
    
    setTimeout(() => {
      state.age++;
      year.value++
    }, 1000);

    // 修改age值时会触发 watch的回调
    watch(
      () => state.age,
      (newAge, oldAge) => {
        console.log("新值:", newAge, "老值:", olAge);
      }
    );
    
    watchEffect(() => {
        console.log(state);
        console.log(year);
      }
    );
      
      //侦听 ref 定义的数据
    const year = ref(0);

    setTimeout(() => {
      year.value++;
    }, 1000);

    watch(year, (newVal, oldVal) => {
      console.log("新值:", newVal, "老值:", oldVal);
    });


    return {
      ...toRefs(state),
    };
  },
});

```



##### 1.4.生命周期的变化

- 生命周期上， Vue2.x 中的`beforeDestroy`名称变更成`beforeUnmount`; `destroyed` 表更为 `unmounted`，
- setup在beforeCreate之前执行

![img](https://img-blog.csdnimg.cn/2021060423231561.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzUwNzg5MjAx,size_16,color_FFFFFF,t_70)



- 在setup中使用生命周期不一样了

  ![img](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3eadd1ec0ac94343951ae2453cf41fce~tplv-k3u1fbpfcp-watermark.awebp)

  ```css
  可以看见beforeCreate`和`created`被`setup`替换了（但是 Vue3 中你仍然可以使用， 因为 Vue3 是向下兼容的， 也就是你实际使用的是 vue2 的）。其次，钩子命名都增加了`on`; Vue3.x 还新增用于调试的钩子函数`onRenderTriggered`和`onRenderTricked
  ```



自定义指令生命周期


- 在 Vue 3 中对自定义指令的 API 进行了更加语义化的修改， 就如组件生命周期变更一样， 都是为了更好的语义化， 变更如下： ![img](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5a85dca78e2f4efcab61b03c98ec80de~tplv-k3u1fbpfcp-watermark.awebp)

  

  

##### 2.Vue3可以自定义hooks

- 约定这些「自定义 Hook」以 use 作为前缀，和普通的函数加以区分





##### 

##### 7.响应式原理的改变 Vue3.x 使用 Proxy 取代 Vue2.x 版本的 Object.defineProperty

1. `Object.defineProperty`只能劫持对象的属性， 而 Proxy 是直接代理对象

   由于`Object.defineProperty`只能劫持对象属性，需要遍历对象的每一个属性，如果属性值也是对象，就需要递归进行深度遍历。但是 Proxy 直接代理对象， 不需要遍历操作

2. `Object.defineProperty`对新增属性需要手动进行`观察`

   因为`Object.defineProperty`劫持的是对象的属性，所以新增属性时，需要重新遍历对象， 对其新增属性再次使用`Object.defineProperty`进行劫持。也就是 Vue2.x 中给数组和对象新增属性时，需要使用`$set`才能保证新增的属性也是响应式的, `$set`内部也是通过调用`Object.defineProperty`去处理的。

